#version 400 core

layout(triangles, equal_spacing, cw) in;
in vec3 tcPosition[];
out vec3 tePosition;
out vec3 color;
uniform mat4 uModel;
uniform mat4 uView;
uniform mat4 uProjection;

void main()
{
	vec3 lightPos = vec3(0, 0, 1.0);

	vec3 objColor = vec3(0.8f, 0.2f, 0.2f);
	vec3 lightColor = vec3(1.0f, 1.0f, 1.0f);

	vec3 p0 = gl_TessCoord.x * tcPosition[0];
	vec3 p1 = gl_TessCoord.y * tcPosition[1];
	vec3 p2 = gl_TessCoord.z * tcPosition[2];

	tePosition = normalize(p0 + p1 + p2);
	vec4 pos = uView * uModel * vec4(tePosition, 1);
	gl_Position = uProjection * pos;

	/* "Technically" need to calculate normal to current triangle here */

	vec3 relativeLightPos = lightPos - pos.xyz;
	float lightIntensity =
		dot(
			normalize(gl_Position.xyz),
			normalize(relativeLightPos)
		);
	lightIntensity = clamp(lightIntensity, 0, 1);

	color = objColor * lightColor * lightIntensity;
}
